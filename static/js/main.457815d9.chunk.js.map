{"version":3,"sources":["components/Cell.tsx","components/Game.tsx","index.tsx"],"names":["Cell","props","className","onClick","symbol","convert","0","1","2","TicTacToe","useState","setWinner","player","setPlayer","grid","setGrid","changeGrid","row","col","tempGrid","thisMove","getPlayer","checkWinner","Set","size","i","length","map","rowIndex","cell","cellIndex","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yOAQaA,EAAyB,SAACC,GACrC,OACE,qBAAKC,UAAU,OAAOC,QAAS,kBAAMF,EAAME,WAA3C,SACGF,EAAMG,UCLPC,EAAyB,CAC7BC,EAAG,GACHC,EAAG,IACHC,EAAG,KAGQC,EAAsB,WAAM,MAEXC,mBAAS,GAFE,mBAExBC,GAFwB,aAKXD,mBAAS,GALE,mBAKhCE,EALgC,KAKxBC,EALwB,OAmBfH,mBAAqB,CAC3C,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,KAtB8B,mBAmBhCI,EAnBgC,KAmB1BC,EAnB0B,KAyBjCC,EAAa,SAACC,EAAaC,GAC/B,GAAsB,GAAlBJ,EAAKG,GAAKC,GAAd,CAEA,IAAMC,EAAWL,EACjBK,EAASF,GAAKC,GArBE,WAEhB,IAAME,EAAWR,EAKjB,OAHiBC,EAAH,GAAVD,EAAuB,EACZ,GAERQ,EAccC,GACrBN,EAAQI,KAIJG,EAAc,WAAc,oBAEhBR,GAFgB,IAEhC,2BAAsB,CAAC,IAAdG,EAAa,QAEpB,GAA2B,GADJ,IAAIM,IAAIN,GACZO,KAAW,OAAOP,EAAI,IAJX,8BAQhC,IAAK,IAAIQ,EAAI,EAAGA,EAAIX,EAAK,GAAGY,OAAS,EAAGD,IAAK,CAE3C,GAA2B,GADJ,IAAIF,IAAI,CAACT,EAAK,GAAGW,GAAIX,EAAK,GAAGW,GAAIX,EAAK,GAAGW,KAC7CD,KAAW,OAAOV,EAAK,GAAGW,GAI/C,OAAIX,EAAK,GAAG,IAAMA,EAAK,GAAG,IAAMA,EAAK,GAAG,IAAMA,EAAK,GAAG,IAClDA,EAAK,GAAG,IAAMA,EAAK,GAAG,IAAMA,EAAK,GAAG,IAAMA,EAAK,GAAG,GADWA,EAAK,GAAG,GAGlE,GAaT,OACE,sBAAKZ,UAAU,YAAf,UACE,sBAAKA,UAAU,UAAf,UACoB,GAAjBoB,KAAsB,+BAAKjB,EAAQO,GAAb,eACL,GAAjBU,KAAsB,+BAAKjB,EAAQiB,KAAb,WACvB,wBAAQnB,QAfI,WAChBY,EAAQ,CACN,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,KAETJ,EAAU,GACVE,EAAU,IAQN,4BAEF,qBAAKX,UAAU,OAAf,SACGY,EAAKa,KAAI,SAACV,EAAKW,GACd,OACE,qBAAK1B,UAAU,MAAf,SACGe,EAAIU,KAAI,SAACE,EAAMC,GACd,OACE,cAAC,EAAD,CACE1B,OAAQC,EAAQS,EAAKc,GAAUE,IAC/B3B,QAAS,kBAAMa,EAAWY,EAAUE,oBCvFxDC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.457815d9.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport \"../styles/Cell.css\";\n\ninterface IProps {\n  symbol: string;\n  onClick: Function;\n}\n\nexport const Cell: React.FC<IProps> = (props) => {\n  return (\n    <div className=\"cell\" onClick={() => props.onClick()}>\n      {props.symbol}\n    </div>\n  );\n};\n","import React, { useState } from \"react\";\nimport \"../styles/Game.css\";\nimport { Cell } from \"./Cell\";\n\n// Converter for the Game Grid\ntype CharConverter = Record<number, string>;\nconst convert: CharConverter = {\n  0: \"\",\n  1: \"X\",\n  2: \"O\",\n};\n\nexport const TicTacToe: React.FC = () => {\n  // Variable ob das Spiel vorbei ist\n  const [winner, setWinner] = useState(0);\n\n  // Symbol was in die Zellen gepackt wird verwalten\n  const [player, setPlayer] = useState(1);\n\n  // Methode um das momentane Symbol zu kriegen, und um es direkt zu Tauschen\n  const getPlayer = (): number => {\n    // Spieler f√ºr momentanen Zug zwichenspeichern\n    const thisMove = player;\n\n    if (player == 1) setPlayer(2);\n    else setPlayer(1);\n\n    return thisMove;\n  };\n\n  // Game Grid | Numbers convert to a charcter\n  const [grid, setGrid] = useState<number[][]>([\n    [0, 0, 0],\n    [0, 0, 0],\n    [0, 0, 0],\n  ]);\n  // If a Symbol changes, it does through this method\n  const changeGrid = (row: number, col: number): void => {\n    if (grid[row][col] != 0) return;\n\n    const tempGrid = grid;\n    tempGrid[row][col] = getPlayer();\n    setGrid(tempGrid);\n  };\n\n  // This function checks if there is a winner\n  const checkWinner = (): number => {\n    //Horizontal Checking\n    for (let row of grid) {\n      const distinctValues = new Set(row);\n      if (distinctValues.size == 1) return row[0];\n    }\n\n    //Vertical checking\n    for (let i = 0; i < grid[0].length + 1; i++) {\n      const distinctValues = new Set([grid[0][i], grid[1][i], grid[2][i]]);\n      if (distinctValues.size == 1) return grid[0][i];\n    }\n\n    //Diagonal checking\n    if (grid[0][0] == grid[1][1] && grid[0][0] == grid[2][2]) return grid[0][0];\n    if (grid[0][2] == grid[1][1] && grid[0][0] == grid[2][0]) return grid[0][0];\n\n    return 0;\n  };\n\n  const resetGame = () => {\n    setGrid([\n      [0, 0, 0],\n      [0, 0, 0],\n      [0, 0, 0],\n    ]);\n    setWinner(0);\n    setPlayer(1);\n  };\n\n  return (\n    <div className=\"container\">\n      <div className=\"display\">\n        {checkWinner() == 0 && <h2>{convert[player]} is next!</h2>}\n        {checkWinner() != 0 && <h2>{convert[checkWinner()]} won!</h2>}\n        <button onClick={resetGame}>Start over!</button>\n      </div>\n      <div className=\"grid\">\n        {grid.map((row, rowIndex) => {\n          return (\n            <div className=\"row\">\n              {row.map((cell, cellIndex) => {\n                return (\n                  <Cell\n                    symbol={convert[grid[rowIndex][cellIndex]]}\n                    onClick={() => changeGrid(rowIndex, cellIndex)}\n                  />\n                );\n              })}\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { TicTacToe } from \"./components/Game\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <TicTacToe />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}