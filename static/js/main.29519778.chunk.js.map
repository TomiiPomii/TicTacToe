{"version":3,"sources":["components/Cell.tsx","components/Game.tsx","index.tsx"],"names":["Cell","props","className","onClick","symbol","convert","0","1","2","TicTacToe","useState","player","setPlayer","winner","setWinner","grid","setGrid","changeGrid","row","col","console","log","tempGrid","thisMove","getPlayer","checkWinner","Set","size","i","length","map","rowIndex","cell","cellIndex","String","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yOAQaA,EAAyB,SAACC,GACrC,OACE,qBAAKC,UAAU,OAAOC,QAAS,kBAAMF,EAAME,WAA3C,SACGF,EAAMG,UCLPC,EAAyB,CAC7BC,EAAG,GACHC,EAAG,IACHC,EAAG,KAGQC,EAAsB,WAAM,MAEXC,mBAAS,GAFE,mBAEhCC,EAFgC,KAExBC,EAFwB,OAKXF,mBAAS,GALE,mBAKhCG,EALgC,KAKxBC,EALwB,OAmBfJ,mBAAqB,CAC3C,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,KAtB8B,mBAmBhCK,EAnBgC,KAmB1BC,EAnB0B,KAyBjCC,EAAa,SAACC,EAAaC,GAG/B,GAFAC,QAAQC,IAAR,eAAoBH,EAApB,mBAAkCC,IAEX,IAAnBJ,EAAKG,GAAKC,IAAyB,IAAXN,EAA5B,CAEA,IAAMS,EAAWP,EACjBO,EAASJ,GAAKC,GAvBE,WAEhB,IAAMI,EAAWZ,EAKjB,OAHkBC,EAAH,IAAXD,EAAwB,EACb,GAERY,EAgBcC,GACrBR,EAAQM,GACRG,MAIIA,EAAc,WAAY,oBAEdV,GAFc,IAE9B,2BAAsB,CAAC,IAAdG,EAAa,QACpB,GAAe,IAAXA,EAAI,GAER,GAA4B,IADL,IAAIQ,IAAIR,GACZS,KAEjB,YADAb,EAAUI,EAAI,KANY,8BAY9B,IAAK,IAAIU,EAAI,EAAGA,EAAIb,EAAK,GAAGc,OAAQD,IAClC,GACEb,EAAK,GAAGa,KAAOb,EAAK,GAAGa,IACvBb,EAAK,GAAGa,KAAOb,EAAK,GAAGa,IACR,IAAfb,EAAK,GAAGa,GAGR,YADAd,EAAUC,EAAK,GAAGa,IAMlBb,EAAK,GAAG,KAAOA,EAAK,GAAG,IAAMA,EAAK,GAAG,KAAOA,EAAK,GAAG,GAIpDA,EAAK,GAAG,KAAOA,EAAK,GAAG,IAAMA,EAAK,GAAG,KAAOA,EAAK,GAAG,IACtDD,EAAUC,EAAK,GAAG,IAJlBD,EAAUC,EAAK,GAAG,KAmBtB,OACE,sBAAKb,UAAU,YAAf,UACE,sBAAKA,UAAU,UAAf,UACc,IAAXW,GAAgB,+BAAKR,EAAQM,GAAb,eACL,IAAXE,GAAgB,+BAAKR,EAAQQ,GAAb,WACjB,wBAAQV,QAfI,WAChBa,EAAQ,CACN,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,KAETJ,EAAU,GACVE,EAAU,IAQN,4BAEF,qBAAKZ,UAAU,OAAf,SACGa,EAAKe,KAAI,SAACZ,EAAKa,GACd,OACE,qBAA4B7B,UAAU,MAAtC,SACGgB,EAAIY,KAAI,SAACE,EAAMC,GACd,OACE,cAAC,EAAD,CACE7B,OAAQC,EAAQU,EAAKgB,GAAUE,IAC/B9B,QAAS,kBAAMc,EAAWc,EAAUE,KAFtC,UAGUF,GAHV,OAGqBE,QANjBC,OAAOH,aCnG7BI,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.29519778.chunk.js","sourcesContent":["import React from \"react\";\nimport \"../styles/Cell.css\";\n\ninterface IProps {\n  symbol: string;\n  onClick: Function;\n}\n\nexport const Cell: React.FC<IProps> = (props) => {\n  return (\n    <div className=\"cell\" onClick={() => props.onClick()}>\n      {props.symbol}\n    </div>\n  );\n};\n","import React, { useState } from \"react\";\nimport \"../styles/Game.css\";\nimport { Cell } from \"./Cell\";\n\n// Converter for the Game Grid\ntype CharConverter = Record<number, string>;\nconst convert: CharConverter = {\n  0: \"\",\n  1: \"X\",\n  2: \"O\",\n};\n\nexport const TicTacToe: React.FC = () => {\n  // Symbol was in die Zellen gepackt wird verwalten\n  const [player, setPlayer] = useState(1);\n\n  //Ob es einen Sieger gibt\n  const [winner, setWinner] = useState(0);\n\n  // Methode um das momentane Symbol zu kriegen, und um es direkt zu Tauschen\n  const getPlayer = (): number => {\n    // Spieler f√ºr momentanen Zug zwichenspeichern\n    const thisMove = player;\n\n    if (player === 1) setPlayer(2);\n    else setPlayer(1);\n\n    return thisMove;\n  };\n\n  // Game Grid | Numbers convert to a charcter\n  const [grid, setGrid] = useState<number[][]>([\n    [0, 0, 0],\n    [0, 0, 0],\n    [0, 0, 0],\n  ]);\n  // If a Symbol changes, it does through this method\n  const changeGrid = (row: number, col: number): void => {\n    console.log(`Row: ${row} Column ${col}`);\n\n    if (grid[row][col] !== 0 || winner !== 0) return;\n\n    const tempGrid = grid;\n    tempGrid[row][col] = getPlayer();\n    setGrid(tempGrid);\n    checkWinner();\n  };\n\n  // This function checks if there is a winner\n  const checkWinner = (): void => {\n    //Horizontal Checking\n    for (let row of grid) {\n      if (row[0] === 0) continue;\n      const distinctValues = new Set(row);\n      if (distinctValues.size === 1) {\n        setWinner(row[0]);\n        return;\n      }\n    }\n\n    //Vertical checking\n    for (var i = 0; i < grid[0].length; i++) {\n      if (\n        grid[0][i] === grid[1][i] &&\n        grid[0][i] === grid[2][i] &&\n        grid[0][i] !== 0\n      ) {\n        setWinner(grid[0][i]);\n        return;\n      }\n    }\n\n    //Diagonal checking\n    if (grid[0][0] === grid[1][1] && grid[0][0] === grid[2][2]) {\n      setWinner(grid[0][0]);\n      return;\n    }\n    if (grid[0][2] === grid[1][1] && grid[0][2] === grid[2][0]) {\n      setWinner(grid[0][2]);\n      return;\n    }\n  };\n\n  const resetGame = () => {\n    setGrid([\n      [0, 0, 0],\n      [0, 0, 0],\n      [0, 0, 0],\n    ]);\n    setPlayer(1);\n    setWinner(0);\n  };\n\n  return (\n    <div className=\"container\">\n      <div className=\"display\">\n        {winner === 0 && <h2>{convert[player]} is next!</h2>}\n        {winner !== 0 && <h2>{convert[winner]} won!</h2>}\n        <button onClick={resetGame}>Start over!</button>\n      </div>\n      <div className=\"grid\">\n        {grid.map((row, rowIndex) => {\n          return (\n            <div key={String(rowIndex)} className=\"row\">\n              {row.map((cell, cellIndex) => {\n                return (\n                  <Cell\n                    symbol={convert[grid[rowIndex][cellIndex]]}\n                    onClick={() => changeGrid(rowIndex, cellIndex)}\n                    key={`${rowIndex}${cellIndex}`}\n                  />\n                );\n              })}\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { TicTacToe } from \"./components/Game\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <TicTacToe />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}